# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Dir(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, name=None, parent_directory=None, files=None):  # noqa: E501
        """Dir - a model defined in Swagger

        :param name: The name of this Dir.  # noqa: E501
        :type name: str
        :param parent_directory: The parent_directory of this Dir.  # noqa: E501
        :type parent_directory: str
        :param files: The files of this Dir.  # noqa: E501
        :type files: List[str]
        """
        self.swagger_types = {
            'name': str,
            'parent_directory': str,
            'files': List[str]
        }

        self.attribute_map = {
            'name': 'name',
            'parent_directory': 'parent_directory',
            'files': 'files'
        }

        self._name = name
        self._parent_directory = parent_directory
        self._files = files

    @classmethod
    def from_dict(cls, dikt):
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Dir of this Dir.  # noqa: E501
        :rtype: Dir
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this Dir.


        :return: The name of this Dir.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Dir.


        :param name: The name of this Dir.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def parent_directory(self):
        """Gets the parent_directory of this Dir.


        :return: The parent_directory of this Dir.
        :rtype: str
        """
        return self._parent_directory

    @parent_directory.setter
    def parent_directory(self, parent_directory):
        """Sets the parent_directory of this Dir.


        :param parent_directory: The parent_directory of this Dir.
        :type parent_directory: str
        """

        self._parent_directory = parent_directory

    @property
    def files(self):
        """Gets the files of this Dir.


        :return: The files of this Dir.
        :rtype: List[str]
        """
        return self._files

    @files.setter
    def files(self, files):
        """Sets the files of this Dir.


        :param files: The files of this Dir.
        :type files: List[str]
        """

        self._files = files
